# функция контроля выхода
def check_out():                       # n - переменная контроля выхода из программы
    """Позволяет организовать непрерывный ввод данных пользователем

    Пользователь может постоянно вводить новые данные и получать результат программы.
    При вводе символа 'q' функция завершает программу

        # пример оформления кода прграммы
        def main():
            var_1 = input('var_1: ')            # пользователь вводит что угодно
            var_2 = input('var_2: ')
            var_3 = input("var_3: ")
            my_func(var_1, var_2, var_3)        # запускаем нашу функцию
            check_out()                        # в конце основного кода вызовется функция для контроля повторного исполнения

        # ЭТО СОБСТВЕННО ВЫЗОВ КОДА ПРОГРАММЫ
        main()                                  # ну, вперед!

    """
    str = input(f'Для выхода из программы нажмите "1", для продолжения просто "Enter"')
    # если n не равно символу 'q', то снова вызываем главную программу main()
    return main() if str != 'q' else None

# функция контроля ввода строки с заданными условиями


def input_str(nbr_type, nbr_text):
    """Проверяет, что пользователь ввел число с заданным условием.

        Именованные параметры:
        nbr_type        -- условие на строку
        nbr_text        -- надпись, выводимая в запросе на ввод числа для пользователя

        nbr_type. Передает уловие отбора строки при помощи функции lambda.
        Если условие не передается, то передаем функцию следующего вида (lambda a: True)

        Пример вызова функции:
        1.
        text = '> Введите действительное положительное число x: '
        print(input_nbr('int',text,lambda a: True)      - условий нет

        2.
        text = '> Введите действительное положительное число x: '
        print(input_nbr('int', text, lambda a: a = 'a'))  - ввод символа 'a'

    """
    print("Если хотите прервать ввод, введите пустую строку")
    while True:  # цикл закончится тогда, когда введенное значение будет числом с заданным условием
        # если введенное значение не число или не удовлетворяет условиям
        value = input(f"{nbr_text}")    # пользователь вводит строку
        if value == '':
            # если пользователь захотел прервать ввод выходим и возвращаем ноль
            return 0
        if nbr_type(value):  # условие передается функцией вида lambda a: a > 0
            return value
        print(f"'Ошибка' {nbr_text}")
# Определения используемых фукций конец //////////////////////////////////

# функция контроля ввода числа с заданными условиями


def input_nbr(nbr_type, nbr_text, nbr_cond):
    """Проверяет, что пользователь ввел число с заданным условием.

        Именованные параметры:
        nbr_type        -- тип числа (int или float)
        nbr_text        -- надпись, выводимая в запросе на ввод числа для пользователя
        nbr_cond        -- условие, налагаемое на число

        nbr_type. Если парамент принимает значение 'int', то получаем целое число.
        Любое другое значение выведет число с плавающей точкой

        nbr_cond. Передает уловие отбора чисел при помощи функции lambda.
        Если условие не передается, то передаем функцию следующего вида (lambda a: True)

        Пример вызова функции:
        1.
        text = '> Введите действительное положительное число x: '
        print(input_nbr('int',text,lambda a: True)      - ввод целого числа, условий нет

        2.
        text = '> Введите действительное положительное число x: '
        print(input_nbr('int', text, lambda a: a > 0))  - ввод целого числа, число больше нуля

        3.
        Обратите внимание на два момента. Первое - мы проверяем возникновение двух различных
        исключений: TypeError и ValueError. Таким образом мы не только обработаем ввод числа
        с плавающей точкой (например: '9.9'), но и обработаем пустой ввод и даже ввод
        произвольной строки, например: 'Ham on rye'. Второе -- мы точно указали какие исключения
        собираемся отлавливать. В принципе, можно оставить оператор exception без аргументов,
        особо не обременяя себя указанием названий интересующих нас исключений
    """
    value = input(f"{nbr_text}")  # пользователь вводит число
    while True:  # цикл закончится тогда, когда введенное значение будет числом с заданным условием
        # если введенное значение не число или не удовлетворяет условиям
        try:
            # пытаемся преобразовать переменную в целое число
            float(value)
            # если успешно, проверим, заданное условие
            if nbr_cond(
                    float(value)):  # условие передается функцией вида lambda a: a > 0
                break  # Если ввод правильный, выходим
            # пользователь повторно вводит число
            value = input(f"'Ошибка' {nbr_text}")
        except (TypeError, ValueError):  # обработаем Перехват исключения
            # если введенное значение нельзя преобразовать в число
            # flag = False
            value = input(f"'Ошибка' {nbr_text}")
    # Если ввод верный, то возвращаем значение целым или с плавающей точкой.
    # В зависимости от запроса
    return int(float(value)) if nbr_type == 'int' else float(value)


def is_number(value):
    """Проверяет, является ли строка числом, удовлетворяющее заданным условиям

        Именованные параметры:
        nbr_type        -- тип числа (int или float)
        nbr_cond        -- условие, налагаемое на число

        value. переданное значение для проверки

        Если число, вернем True, иначе False

        Пример вызова функции:
        is_number(value)
    """
    try:
        # пытаемся преобразовать переменную в целое число
        float(value)
        return True                         # True, если число
    except ValueError:                      # обработаем Перехват исключения
        # если введенное значение нельзя преобразовать в число то возвращаем
        # False
        return False


