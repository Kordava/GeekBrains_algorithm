"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""
# из собственной библиотеки подключаю функцию контроля ввода числа
# функцию использовал в предыдущих работах, не буду загромождать
from lib import input_nbr


def recursion(inp, numb, even = 0, odd = 0, total = 0):
    """
    рекурсия
    inp - введенное число
    numb - промежуточная переменная для сохранения остатка числа
    even, odd - счетчики четных и нечетных чисел
    total - счетчик цифр в числе
    """
    if numb == 0:
        print(
            f"В числе {inp} всего {total} цифр, из которых {even} чётных и {odd} нечётных")
        return
    if numb % 2 == 0:
        even += 1
    else:
        odd += 1
    numb //= 10
    total += 1

    recursion(inp, numb, even, odd, total)

# содержит код основной программы из задания


def main():
    """
        содержит код основной программы из задания
    """
    # пользователь вводит число
    inp = input_nbr(
        'int',
        '> Введите натуральное число: ',
        lambda a: a > 0)
    # вызываем рекурсию
    recursion(inp, inp)


# ЭТО СОБСТВЕННО ВЫЗОВ КОДА ПРОГРАММЫ
main()                                  # ну, вперед!
# конец кода программы////////////////////////////////////////////////////
