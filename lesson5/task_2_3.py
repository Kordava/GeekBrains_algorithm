"""
2.	Написать программу сложения и умножения двух шестнадцатеричных чисел.
При этом каждое число представляется как массив, элементы которого это цифры числа.
Например, пользователь ввёл A2 и C4F. Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

Подсказка:
Для решения задачи обязательно примените какую-нибудь коллекцию из модуля collections
Для лучшее освоения материала можете даже сделать несколько решений этого задания,
применив несколько коллекций из модуля collections
Также попробуйте решить задачу вообще без collections и применить только ваши знания по ООП
(в частности по перегрузке методов)
"""
# ВАРИАНТ 4. Через коллекции-----------------------------------------------------------------
# используем именованные кортежи для улучшения вывода

import collections
from functools import reduce

def very_simple(num_1, num_2):
    """
    самый простой вариант со встроенной функцией
    для проверки дальнейших расчетов
    """
    sum_simple = hex(int(num_1, 16) + int(num_2, 16))
    mult_simple = hex(int(num_1, 16) * int(num_2, 16))
    return sum_simple, mult_simple

def from_hex_to_dec(hex_num):
    """
    Переводит число из 16-й системы в 10-ю

    """
    # ряд элементов 16-ой системы
    list_of_numbers = '0123456789ABCDEF'
    # для краткости используем reduce
    # Начинаем с высших разрядов, по достижении низших высшие умножатся на
    # разрядность 16
    dec_num = reduce(lambda x, y: x * 16 +
                     (list_of_numbers.find(y)), list(hex_num), 0)

    return dec_num


def from_dec_to_hex(dec_num):
    """
    Переводит число из 10-й системы в 16-ю

    """
    # ряд элементов 16-ой системы
    list_of_numbers = '0123456789ABCDEF'
    hex_num = []
    tmp_num = dec_num
    while True:
        tmp_num_chas = tmp_num // 16
        tmp_num_ost = tmp_num % 16
        hex_ost = list(list_of_numbers[tmp_num_ost])
        hex_num = hex_ost + hex_num

        if tmp_num_chas <= 16:
            hex_chas = list(list_of_numbers[tmp_num_chas])
            return hex_chas + hex_num
        tmp_num = tmp_num_chas


def sum_hex(num_1, num_2):
    """
    СУММА ЧИСЕЛ В 16-ТИРИЧНОЙ СИСТЕМЕ

    Оптимизированный вариант функции из первого варианта исполнения.

    Математика одна и та же, что в десятичной системе, что в 16-тиричной. Отличается только форма
    записи значений чисел. В прошлой версии мы фактически на каждом шаге сопоставляли запись
    16-й системы записи в 10-й. Делали расчет каждого разряда в 10-й, так как его
    использует язык программирования и перводили его обратно в 16-ю.

    Проще сразу все число перебросить в 10-ю систему, посчитать результат и перевести обратно в 16-ю
    запись.
    """
    TEMPLE = collections.namedtuple(
        'Sum', ['Num1', 'Num2', 'Res'])
    res = []
    # переводим числа в 10-ю систему
    dec_num_1 = from_hex_to_dec(num_1)
    dec_num_2 = from_hex_to_dec(num_2)
    # суммируем и возвращеаем в 16-ю
    hex_sum = from_dec_to_hex(dec_num_1 + dec_num_2)
    # возвращаем результат
    res.append(
        TEMPLE(
            Num1=num_1,
            Num2=num_2,
            Res=hex_sum))
    return res


def mult_hex(num_1, num_2):
    """
    ПРОИЗВЕДЕНИЕ ЧИСЕЛ В 16-ТИРИЧНОЙ СИСТЕМЕ

    Оптимизированный вариант функции из первого варианта исполнения.

    Математика одна и та же, что в десятичной системе, что в 16-тиричной. Отличается только форма
    записи значений чисел. В прошлой версии мы фактически на каждом шаге сопоставляли запись
    16-й системы записи в 10-й. Делали расчет каждого разряда в 10-й, так как его
    использует язык программирования и перводили его обратно в 16-ю.

    Проще сразу все число перебросить в 10-ю систему, посчитать результат и перевести обратно в 16-ю
    запись.
    """
    TEMPLE = collections.namedtuple(
        'Mult', ['Num1', 'Num2', 'Res'])
    res = []
    # переводим числа в 10-ю систему
    dec_num_1 = from_hex_to_dec(num_1)
    dec_num_2 = from_hex_to_dec(num_2)
    # умножаем и возвращеаем в 16-ю
    hex_sum = from_dec_to_hex(dec_num_1 * dec_num_2)
    # возвращаем результат
    res.append(
        TEMPLE(
            Num1=num_1,
            Num2=num_2,
            Res=hex_sum))
    return res
# -----------------------------------------------------------------------------------------------
# Рабочая область

# сохраняем наши числа в переменых
NUM_1 = 'A2'
NUM_2 = 'C4F'

# выведем результаты контрольного расчета
print(very_simple(NUM_1, NUM_2))

# и результаты наших функции
print(sum_hex(NUM_1, NUM_2))
print(mult_hex(NUM_1, NUM_2))


# Результаты выполнения
    # ('0xcf1', '0x7c9fe')
    # ['C', 'F', '1']
    # ['7', 'C', '9', 'F', 'E']
# Совпадает
