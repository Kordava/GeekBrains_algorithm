"""
1. Проанализировать скорость и сложность одного любого алгоритма,
разработанных в рамках домашнего задания первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

Подсказка:
1) возьмите 2-3 задачи, реализованные ранее, сделайте замеры на разных входных данных
2) сделайте для каждой из задач оптимизацию (придумайте что можно оптимизировать)
и также выполните замеры на уже оптимизированных алгоритмах
3) опишите результаты - где, что эффективнее и почему.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""

# --------------------------------------------------------------------------------------------------
# этап 2: оптимизация кода функции my_timeit(statements, mode=0): из этапа 1.
import timeit
import time
# --------------------------------------------------------------------------------------------------
# блок тестовых функций


def some_quick_method(loop_count):
    """
    # эмуляция n
    """
    for i in range(loop_count):
        time.sleep(0.1)
    return i

# блок оптимизируемых функций

# 1. Что лучше timeit.timeit или timeit.repeat----------------------------


def f_timeit():
    """  расчет времени через timeit.timeit. Надо учесть, что он выдает суммарное время
    по всем попыткам для получения времени одной попытки нужно делить на количество попыток"""
    res = timeit.timeit("some_quick_method(10)", setup=SETUP, number=3) / 3
    return res


def f_repeat():
    """ расчет времени через timeit.repeat."""
    res = min(
        timeit.repeat(
            "some_quick_method(10)",
            SETUP,
            timeit.default_timer,
            3,
            1))
    return res


# проверяем
SETUP = "from __main__ import f_timeit, f_repeat, some_quick_method"
FUNC = 'f_timeit()'
print(
    f'f_timeit выполняется за {timeit.timeit(FUNC, setup=SETUP, number=1)} секунд(ы)')
FUNC = 'f_repeat()'
print(
    f'f_repeat выполняется за {timeit.timeit(FUNC, setup=SETUP, number=1)} секунд(ы)')

# результат
#   f_timeit выполняется за 3.0282229 секунд(ы)
#   f_repeat выполняется за 3.0223555 секунд(ы)
# вывод: время работы примерно равно, но функция timeit.repeat за это время успевает найти
# еще и минимальное значение времени выполнения. Функция timeit.repeat работает более чисто,
# оставляем ее.
# --------------------------------------------------------------------------------------------------
