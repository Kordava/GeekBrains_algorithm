"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы. Задачу можно решить без сортировки исходного
массива. Но если это слишком сложно, то используйте метод сортировки,
который не рассматривался на уроках
"""
import timeit
import random


def my_sort_count_new_5(data):
    """
    Мой алгоритм сортировки
    """
    # будет содержать конечный вывод
    data2 = []
    # будет использована для поиска максимального числа в массиве
    # вначале равно первому элементы массива
    n_max = data[0]
    # этот вспомогательный массив длиною до максимального числа во входящем массиве
    # в нем будем считать, сколько раз каждое из чисел входит в начальный
    # массив
    my_work_list = [0] * (n_max + 1)
    # идем по массиву
    for i in data:
        # если число больше максимального, расширяем длину вспомогательного массива
        # до нового максимума
        # и обновляем переменную максимума
        if i > n_max:
            my_work_list.extend([0] * (i - n_max))
            n_max = i
        # увеличиваем во вспомогательном массиве счеткик вхождения числа в
        # начальный массив
        my_work_list[i] += 1
    # перебираем все числа до максимального и формируем новый массив, уже
    # отсортированный
    for i in range(n_max + 1):
        data2.extend([i] * my_work_list[i])
    return data2


def median_v3(orig_list):
    """
    Поиск медианы, первая версия
    """
    # рабочий массив, содержащий наш искомый элемент
    work_list = my_sort_count_new_5(orig_list)
    return work_list[M]


# ----------------------------------------------------------------------------------------------
# генерируем массив
M = 15
ORIG_LIST = [random.randint(0, 200) for _ in range(2 * M + 1)]
# контроольный вывод сгенерированного массива
print(f'Задан массив: {ORIG_LIST}')
# результат нашей функции
print(f'Медиана массива:      {median_v3(ORIG_LIST)}')
# заведомо правильный ответ, сортируем встроенной функцией и выводим
# центральный
print(f'Контрольное значение: {sorted(ORIG_LIST)[M]}')

print()
print(f'Замерим время работы функции.')
print(
    timeit.timeit(
        "median_v3(ORIG_LIST)",
        setup="from __main__ import median_v3, ORIG_LIST",
        number=1000))

"""
Задан массив: [46, 117, 44, 142, 54, 194, 196, 3, 163, 88, 160, 48, 122, 65, 45, 168, 120, 137,
42, 129, 161, 38, 119, 74, 114, 62, 26, 53, 63, 172, 60]
Медиана массива:      88
Контрольное значение: 88

Замерим время работы функции.
0.0325086

Быстрее, чем предыдущие варианты
"""
